public class Driver {

        // creating main method
        public static void main(String[] args) {
//Created a Arraystack to store integers
            ArrayStack stack = new ArrayStack(10);

            System.out.println("Stack using ArrayStack");
//By using push method in the stack we can add the elements in the stack into the Arraystack in the first in first out format
            stack.push(1);

            stack.push(7);

            stack.push(3);

            stack.push(4);

            stack.push(9);

            stack.push(2);
            int val;
            do {
                val = stack.pop();
                if(val == -999)break;
                System.out.println(val);

            }while(val != -999);

            LinkedStack stack1 = new LinkedStack();
            System.out.println("Stack using LinkedStack");
            stack1.push(1);

            stack1.push(7);

            stack1.push(3);

            stack1.push(4);

            stack1.push(9);
            stack1.push(2);
            System.out.println("printing linked stack before removing bottom half");
            stack1.printStack();
             stack1.removebottomhalf();
            System.out.println("printing linked stack after removing bottom half");
             stack1.printStack();
        }
    }

    class ArrayStack {

        private int[] arr;

        private int n;

        private int capacity;

        public ArrayStack(int cap) {

            capacity = cap;

            n = 0;

            arr = new int[cap];

        }

        public int size() {

            return n;

        }

        public void push(int item) {

            if(n == capacity)

                System.out.println("Stack is full");

            else {

                arr[n] = item;

                n++;

            }

        }

        public int pop() {

            int data = -999;

            if(n == 0)

                System.out.println("Stack is empty");

            else {

                data = arr[n-1];

                n--;

            }

            return data;

        }

    }

    class LinkedStack {

        class Node {

            int data;

            Node next;

            Node(int item) {

                data = item;

            }

        }

        private Node front;
        private int size;

        LinkedStack() {
            front = null;
            size = 0;
        }

        public int size() {
            return size;
        }

        public void push(int in) {
            Node n = new Node(in);
            n.next = (front);
            front = n;
            size++;
        }

        public int pop() {
            if(size == 0)
                return 0;

            Node n = front;
            front = front.next;
            size--;
            return n.data;
        }

        public int peek() {
            if(size == 0)
                return 0;

            return front.data;
        }

        public void printStack() {
            Node temp = front;
            while (temp != null) {
                System.out.println(temp.data + " ");
                temp = temp.next;
            }
          //  System.out.println("");
        }

        public void removebottomhalf(){

            int element = (size/2)-1;
            Node temp = front;
            for (int i=0;i<element;i++)
            {
                front = front.next;
            }
            front.next = null;
            front = temp;
        }
}
